public static ServerResponse handleNumberOfLoan(String date){
		
		Connection databaseConnection;
		
		try {
			databaseConnection = ConnectionPool.acquire();
		} catch (IllegalStateException | ClassNotFoundException | SQLException e) {
			logger.trace("Exiting MessageHandler.handleAuthQuery");
			logger.warn("Can't acquire a connection from the pool", e);
			return new ErrorServerResponse("Server-side error. Please retry later.");
		}
		
		try {
			String SQLQuery = "select COUNT(effective_date) as effcount from loans where extract(year from EFFECTIVE_DATE )= "+date+" and is_real='Y'";
			String SQLQuery2 = "select COUNT(effective_date) as allLoan from loans where extract(year from EFFECTIVE_DATE )= "+date;
			Statement statement = databaseConnection.createStatement();
			Statement statement2 = databaseConnection.createStatement();
			try {
				ResultSet results = statement.executeQuery(SQLQuery);
				ResultSet result2 = statement2.executeQuery(SQLQuery2);
				
				
				int numberOffLon = 20;
				int allLoan = 0;
				
				while(results.next()) {
					
				numberOffLon=results.getInt("effcount");
				
				System.out.println("nombre of loan "+results.getString("effcount"));
				}
				while(result2.next()){
					allLoan=result2.getInt("allLoan");
				}
				System.out.println("Number of simulation"+allLoan);
				
				NumberOfLoanResponse response = new NumberOfLoanResponse();
				
				response.setNumberOfLoans(numberOffLon);
				response.setNumberOfSimulations(allLoan);
			//	System.out.println(response.getNumberOfLoans() +" : "+response.getNumberOfLoans());
				logger.trace("Exiting MessageHandler.handleGetAccountsQuery");
				return response; 
			} catch (SQLException e) {
				logger.warn("SQLException caught", e);
				throw e;
			} finally {
				statement.close();
			}
		} catch (SQLException e) {
			logger.warn("SQLException caught", e);
			logger.trace("Exiting MessageHandler.handleAuthQuery");
			return new ErrorServerResponse("Database error");
		} finally {
			// Good practice : the cleanup code is in a finally block.
			ConnectionPool.release(databaseConnection);
		}
		
	}





public static ServerResponse handleInterestBySegment(){
		
		logger.trace("Entering MessageHandler.handleGetSimsQuery");
		
		String SQLquery = "SELECT * FROM DynamiqueSearch"
				
				
				;

		System.out.println(SQLquery);
		Connection databaseConnection;
		try {
			databaseConnection = ConnectionPool.acquire();
		} catch (Exception e) {
			logger.trace("Exiting MessageHandler.handleGetAccountsQuery");
			logger.warn("Can't acquire a connection from the pool", e);
			return new ErrorServerResponse("Server-side error. Please retry later.");
		}
		
		try {
			Statement statement = databaseConnection.createStatement();

			try {
				ResultSet results = statement.executeQuery(SQLquery);
				
				DynamiqueResearchResponse response = new DynamiqueResearchResponse();
				
				SumInterest sumclass = new SumInterest();
				ArrayList<SumInterest> sumInterest = new ArrayList<SumInterest>(); 
				
				while(results.next()) {
				
					sumInterest.add(new SumInterest(results.getString("NAME"),results.getFloat("SUMINTEREST"), results.getString("dates")));
				
				}
				response.setArray(sumInterest);
				logger.trace("Exiting MessageHandler.handleGetAccountsQuery");
				return response;
			} catch (SQLException e) {
				throw e;
			} finally {
				statement.close();
			}
		} catch (SQLException e) {
			logger.warn("SQLException caught", e);
			logger.trace("Exiting MessageHandler.handleGetAccountsQuery");
			return new ErrorServerResponse("Database error");
		} finally {
			// Good practice : the cleanup code is in a finally block.
			ConnectionPool.release(databaseConnection);
		}
	}



public static ServerResponse handleSumofInterest(){
		
		logger.trace("Entering MessageHandler.handleGetSimsQuery");
		
		String SQLquery = "select extract( YEAR from \"MOIS_ANNEE\") as dates,name,sum(\"SOMME_INTERET\") as sum from vue group by  extract( YEAR from \"MOIS_ANNEE\"),name order by dates";
		System.out.println(SQLquery);
		Connection databaseConnection;
		try {
			databaseConnection = ConnectionPool.acquire();
		} catch (Exception e) {
			logger.trace("Exiting MessageHandler.handleGetAccountsQuery");
			logger.warn("Can't acquire a connection from the pool", e);
			return new ErrorServerResponse("Server-side error. Please retry later.");
		}
		
		try {
			Statement statement = databaseConnection.createStatement();

			try {
				ResultSet results = statement.executeQuery(SQLquery);
				
				SumOfInterestResponse response = new SumOfInterestResponse();
				Interest sumclass = new Interest();
				ArrayList<Interest> average = new ArrayList<Interest>(); 
				
				while(results.next()) {
				
					average.add(new Interest(results.getString("dates"),results.getString("name"),results.getFloat("sum")));
					
				}
				response.setArray(average);
				logger.trace("Exiting MessageHandler.handleGetAccountsQuery");
				return response;
			} catch (SQLException e) {
				throw e;
			} finally {
				statement.close();
			}
		} catch (SQLException e) {
			logger.warn("SQLException caught", e);
			logger.trace("Exiting MessageHandler.handleGetAccountsQuery");
			return new ErrorServerResponse("Database error");
		} finally {
			// Good practice : the cleanup code is in a finally block.
			ConnectionPool.release(databaseConnection);
		}
 }
		



public static ServerResponse handleAverage(){
	 {
			logger.trace("Entering MessageHandler.handleGetSimsQuery");
			
			String SQLquery = " select lp.name, Round(avg(loan_duration),2) as moyenne_duree from loans l , loan_types lp where lp.LOAN_TYPE_ID=l.LOAN_TYPE_ID group by lp.name";
			
			Connection databaseConnection;
			try {
				databaseConnection = ConnectionPool.acquire();
			} catch (Exception e) {
				logger.trace("Exiting MessageHandler.handleGetAccountsQuery");
				logger.warn("Can't acquire a connection from the pool", e);
				return new ErrorServerResponse("Server-side error. Please retry later.");
			}
			
			try {
				Statement statement = databaseConnection.createStatement();

				try {
					ResultSet results = statement.executeQuery(SQLquery);
					
					AverageDurationResponse response = new AverageDurationResponse();
					AverageClass averageclass = new AverageClass();
					ArrayList<AverageClass> average = new ArrayList<AverageClass>(); 
					
					while(results.next()) {
						average.add(new AverageClass(results.getString("name"),results.getFloat("moyenne_duree")));
						System.out.println(results.getString("name")+" : "+results.getFloat("moyenne_duree"));
					}
					response.setArray(average);
					logger.trace("Exiting MessageHandler.handleGetAccountsQuery");
					return response;
				} catch (SQLException e) {
					throw e;
				} finally {
					statement.close();
				}
			} catch (SQLException e) {
				logger.warn("SQLException caught", e);
				logger.trace("Exiting MessageHandler.handleGetAccountsQuery");
				return new ErrorServerResponse("Database error");
			} finally {
				// Good practice : the cleanup code is in a finally block.
				ConnectionPool.release(databaseConnection);
			}
	 }
		
	}




public static ServerResponse handleEvolutionOfTheSimulation(String date){
		Connection databaseConnection;
		
		try {
			databaseConnection = ConnectionPool.acquire();
		} catch (IllegalStateException | ClassNotFoundException | SQLException e) {
			logger.trace("Exiting MessageHandler.handleAuthQuery");
			logger.warn("Can't acquire a connection from the pool", e);
			return new ErrorServerResponse("Server-side error. Please retry later.");
		}
		
		try {
			
			String SQLquery = "SELECT COUNT(effective_date) as counts, "
					+ " effective_date from loans where extract(year from EFFECTIVE_DATE )= "+date+" and is_real='N' group by effective_date order by effective_date";
			System.out.println(SQLquery);
			Statement statement = databaseConnection.createStatement();
			
			try {
				
				
				ResultSet results = statement.executeQuery(SQLquery);
				
				evolutionOfTheSimulationsResponse response = new evolutionOfTheSimulationsResponse();
				ListResult result ;
				
				ArrayList<ListResult> array = new ArrayList<ListResult>();
				String dateReturn;
				
				while(results.next()) {
					dateReturn = new SimpleDateFormat("dd/MM/yyyy").format(results.getDate("effective_date")) ;
					System.out.println(dateReturn+" : "+results.getInt("counts"));
				result	= new ListResult(dateReturn,results.getInt("counts"));
					
					array.add(result);
					
				}
				for(ListResult lr: array){
					System.out.println(lr.getCount());
					System.out.println(lr.getDate());
				}
				response.array=array;
				
				
				logger.trace("Exiting MessageHandler.handleGetAccountsQuery");
				return response;
			} catch (SQLException e) {
				throw e;
			} finally {
				statement.close();
			}
		} catch (SQLException e) {
			logger.warn("SQLException caught", e);
			logger.trace("Exiting MessageHandler.handleGetAccountsQuery");
			return new ErrorServerResponse("Database error");
		} finally {
			// Good practice : the cleanup code is in a finally block.
			ConnectionPool.release(databaseConnection);
		}
		
		
	}





public static ServerResponse handleMustSimulatedLoanQuery(){
Connection databaseConnection;
		
		try {
			databaseConnection = ConnectionPool.acquire();
		} catch (IllegalStateException | ClassNotFoundException | SQLException e) {
			logger.trace("Exiting MessageHandler.handleAuthQuery");
			logger.warn("Can't acquire a connection from the pool", e);
			return new ErrorServerResponse("Server-side error. Please retry later.");
		}
		
		try {
			String SQLQuery = "select loan_type_id from  loans where is_real ='N' group by loan_type_id having count(*)>=(select max(count(loan_type_id)) from loans group by loan_type_id)";
			

			Statement statement = databaseConnection.createStatement();
			Statement statement2 = databaseConnection.createStatement();
			
			try {
				ResultSet results = statement.executeQuery(SQLQuery);
				
				int idOfMustSimulatedLoan=0;
				
				while(results.next()){
					idOfMustSimulatedLoan = results.getInt("loan_type_id");
					System.out.println("id "+idOfMustSimulatedLoan);
				}
				
				String SQLQuery2="SELECT NAME FROM LOAN_TYPES WHERE LOAN_TYPE_ID= "+idOfMustSimulatedLoan;
				ResultSet results2 = statement.executeQuery(SQLQuery2);
				String Name = null;
				
				while (results2.next()) {
					Name=results2.getString("Name");
					
				}
				
				
				MustSimulatedLoanResponse mustSimulatedResponse = new MustSimulatedLoanResponse ();
				
				mustSimulatedResponse.setMessage(Name);
				
				logger.trace("Exiting MessageHandler.handleGetAccountsQuery");
				return mustSimulatedResponse;
			} catch (SQLException e) {
				logger.warn("SQLException caught", e);
				throw e;
			} finally {
				statement.close();
			}
		} catch (SQLException e) {
			logger.warn("SQLException caught", e);
			logger.trace("Exiting MessageHandler.handleAuthQuery");
			return new ErrorServerResponse("Database error");
		} finally {
			// Good practice : the cleanup code is in a finally block.
			ConnectionPool.release(databaseConnection);
		}
		
	}
	
	
		
	
	

